#!/bin/sh
#The following modifiers are available for use in mappings:
#Shift
#Lock (Caps lock)
#Control
#Mod1 (Alt)
#Mod2
#Mod3
#Mod4 (Super, Logo, Windows)
#Mod5
#None (Create a mapping without modifiers)
# Note: the "Super" modifier is also known as Logo, GUI, Windows, Mod4, etc.

# This is the example configuration file for river.
#
# If you wish to edit this, you will probably want to copy it to
# $XDG_CONFIG_HOME/river/init or $HOME/.config/river/init first.
#
# See the river(1), riverctl(1), and rivertile(1) man pages for complete
# documentation.

# Use the "logo" key as the primary modifier
mod="Mod4"

# Autostart
riverctl spawn '/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1'
riverctl spawn "dbus-update-activation-environment SEATD_SOCK DISPLAY WAYLAND _DISPLAY XDG_CURRENT_DESKTOP=river"
riverctl spawn 'waybar -c ~/.config/river/waybar/config -s ~/.config/river/waybar/style.css'
riverctl spawn "~/.config/river/scripts/pkill_bc" # loads wallpaper
riverctl spawn "dunst"
# riverctl spawn "wlsunset"
# riverctl spawn "swayidle -w timeout 600 ~/.config/river/wayland_session_lock &"
# riverctl spawn "udiskie -A -t"
# riverctl spawn "wlr-randr --output DP-1 --mode 3840x1600 --pos 0,0 --transform normal --output HDMI-A-1 --mode 1920x1200 --pos 3840,0 --transform 90"

# -----------------------------------------------------------------------------#
# Programs
# riverctl map normal $mod Tab spawn "wofi --show drun"
riverctl map normal $mod D spawn "wofi --show drun"
riverctl map normal $mod B spawn "$HOME/.config/river/scripts/pkill_background-changer &"
riverctl map normal $mod R spawn "bash ~/.config/river/scripts/killall_and_restart" # reload river
riverctl map normal $mod Return spawn 'alacritty'
riverctl map normal $mod+Shift Return spawn 'thunar'
riverctl map normal $mod Q close # close the focused view
# riverctl map normal $mod+Shift L spawn "swaylock -F -l -i ~/.config/river/wallpapers/arch01.jpg"
riverctl map normal $mod+Shift X spawn "bash ~/.config/river/scripts/leave.sh"
# riverctl map normal $mod+Shift b spawn "bluemail"

# -----------------------------------------------------------------------------#
# Tiling specific functions

# decrease/increase the main ratio of rivertile(1)
riverctl map normal $mod+Shift Left send-layout-cmd rivertile "main-ratio -0.05"
riverctl map normal $mod+Shift Right send-layout-cmd rivertile "main-ratio +0.05"

# Mod+Shift+H and Mod+Shift+L to increment/decrement the main count of rivertile(1)
# riverctl map normal $mod+Shift H send-layout-cmd rivertile "main-count +1"
# riverctl map normal $mod+Shift L send-layout-cmd rivertile "main-count -1"

riverctl map normal $mod Space toggle-float # toggle float
riverctl map normal $mod F toggle-fullscreen # toggle fullscreen

# River window actions
riverctl map normal $mod Left focus-view next
riverctl map normal $mod Right focus-view previous

# Mod + Left Mouse Button to move views
riverctl map-pointer normal $mod BTN_LEFT move-view

# Mod + Right Mouse Button to resize views
riverctl map-pointer normal $mod BTN_RIGHT resize-view

# Mod+Shift+J and Mod+Shift+K to swap the focused view with the next/previous
# view in the layout stack
riverctl map normal $mod+Shift J swap next
riverctl map normal $mod+Shift K swap previous

# Mod+Period and Mod+Comma to focus the next/previous output
riverctl map normal $mod Period focus-output next
riverctl map normal $mod Comma focus-output previous

# Mod+Shift+{Period,Comma} to send the focused view to the next/previous output
riverctl map normal $mod+Shift Period send-to-output next
riverctl map normal $mod+Shift Comma send-to-output previous

# Mod+Return to bump the focused view to the top of the layout stack
riverctl map normal $mod+Control+Shift Return zoom

# Mod+Alt+{H,J,K,L} to move views
riverctl map normal $mod+Mod1 H move left 100
riverctl map normal $mod+Mod1 J move down 100
riverctl map normal $mod+Mod1 K move up 100
riverctl map normal $mod+Mod1 L move right 100

# Mod+Alt+Control+{H,J,K,L} to snap views to screen edges
riverctl map normal $mod+Mod1+Control H snap left
riverctl map normal $mod+Mod1+Control J snap down
riverctl map normal $mod+Mod1+Control K snap up
riverctl map normal $mod+Mod1+Control L snap right

# Mod+Alt+Shif+{H,J,K,L} to resize views
riverctl map normal $mod+Mod1+Shift H resize horizontal -100
riverctl map normal $mod+Mod1+Shift J resize vertical 100
riverctl map normal $mod+Mod1+Shift K resize vertical -100
riverctl map normal $mod+Mod1+Shift L resize horizontal 100

for i in $(seq 1 9)
do
    tags=$((1 << ($i - 1)))

    # Mod+[1-9] to focus tag [0-8]
    riverctl map normal $mod $i set-focused-tags $tags

    # Mod+Shift+[1-9] to tag focused view with tag [0-8]
    riverctl map normal $mod+Shift $i set-view-tags $tags

    # Mod+Ctrl+[1-9] to toggle focus of tag [0-8]
    riverctl map normal $mod+Control $i toggle-focused-tags $tags

    # Mod+Shift+Ctrl+[1-9] to toggle tag [0-8] of focused view
    riverctl map normal $mod+Shift+Control $i toggle-view-tags $tags
done

# Mod+0 to focus all tags
# Mod+Shift+0 to tag focused view with all tags
all_tags=$(((1 << 32) - 1))
riverctl map normal $mod 0 set-focused-tags $all_tags
riverctl map normal $mod+Shift 0 set-view-tags $all_tags

# Declare a passthrough mode. This mode has only a single mapping to return to
# normal mode. This makes it useful for testing a nested wayland compositor
riverctl declare-mode passthrough

# Mod+F11 to enter passthrough mode
# riverctl map normal $mod F11 enter-mode passthrough

# Mod+F11 to return to normal mode
# riverctl map passthrough $mod F11 enter-mode normal

# The scratchpad will live on an unused tag. Which tags are used depends on your
# config, but rivers default uses the first 9 tags.
scratch_tag=$((1 << 20 ))

# Toggle the scratchpad with Super+P
riverctl map normal Mod4 P toggle-focused-tags ${scratch_tag}

# Send windows to the scratchpad with Super+Shift+P
riverctl map normal Mod4+Shift P set-view-tags ${scratch_tag}

# Set spawn tagmask to ensure new windows don't have the scratchpad tag unless
# explicitly set.
all_but_scratch_tag=$(( ((1 << 32) - 1) ^ $scratch_tag ))
riverctl spawn-tagmask ${all_but_scratch_tag}


# Various media key mapping examples for both normal and locked mode which do
# not have a modifier
for mode in normal locked
do
    # Eject the optical drive (well if you still have one that is)
    riverctl map $mode None XF86Eject spawn 'eject -T'

    # Control pulse audio volume
    riverctl map $mode None XF86AudioRaiseVolume spawn 'pactl set-sink-volume 0 +10%'
    riverctl map $mode None XF86AudioLowerVolume spawn 'pactl set-sink-volume 0 -10%'
    riverctl map $mode None XF86AudioMute spawn 'pactl set-sink-mute 0 toggle'

    # Control MPRIS aware media players
    riverctl map $mode None XF86AudioMedia spawn 'bash ~/.config/river/scripts/volume pause'
    riverctl map $mode None XF86AudioPlay  spawn 'bash ~/.config/river/scripts/volume pause'
    riverctl map $mode None XF86AudioPrev  spawn 'bash ~/.config/river/scripts/volume prev'
    riverctl map $mode None XF86AudioNext  spawn 'bash ~/.config/river/scripts/volume next'

    # Control screen backlight brighness
    riverctl map $mode None XF86MonBrightnessUp   spawn 'bash ~/.config/river/scripts/brightness up'
    riverctl map $mode None XF86MonBrightnessDown spawn 'bash ~/.config/river/scripts/brightness down'
done

# Set background and border color
riverctl background-color 0x002b36
riverctl border-color-focused 0x93a1a1
riverctl border-color-unfocused 0x586e75

# Set keyboard repeat rate
riverctl set-repeat 50 300

# Set app-ids of views which should float
riverctl float-filter-add "float"
riverctl float-filter-add "popup"

# Set app-ids of views which should use client side decorations
riverctl csd-filter-add "firefox"
riverctl csd-filter-add "gedit"
riverctl csd-filter-add "emacs"

# Set touchpad by grabbing the event
# The below for-loop was shared by Adarsh (github@theCode-Breaker)

for pad in $(riverctl list-inputs | grep -i touchpad )
do
  riverctl input $pad events enabled
  riverctl input $pad tap enabled
  riverctl input $pad disable-while-typing enabled
done

# Set and exec into the default layout generator, rivertile.
# River will send the process group of the init executable SIGTERM on exit.
# riverctl xcursor-theme Breeze_Red
riverctl xcursor-theme Oxygen_Yellow
riverctl default-layout rivertile
riverctl focus-follows-cursor always # disabled normal always
riverctl input "1118:64:Microsoft_Microsoft_3-Button_Mouse_with_IntelliEye(TM)" events enabled
riverctl input "1118:64:Microsoft_Microsoft_3-Button_Mouse_with_IntelliEye(TM)" pointer-accel 1.0

# Make all views with an app-id that starts with "float" and title "foo" start floating.
riverctl rule-add -app-id 'float*' -title 'foo' float

# Make all views with app-id "bar" and any title use client-side decorations
riverctl rule-add -app-id "bar" csd

# Set the default layout generator to be rivertile and start it.
# River will send the process group of the init executable SIGTERM on exit.
riverctl default-layout rivertile
rivertile -view-padding 6 -outer-padding 6 &
