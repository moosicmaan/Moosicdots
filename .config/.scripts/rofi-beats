#!/usr/bin/bash
# =====================================================
# -----------------------------------------------------
# From:
# /* ---- ðŸ’« https://github.com/JaKooLit ðŸ’« ---- */  ##
# For Rofi Beats to play online Music or Locally save media files
# This script wraps around my frequently used terminals
# to provide a uniform interface.
#     Modified by: Jason Bradberry (2024)
# -----------------------------------------------------
# =====================================================

# Directory local music folder
mDIR="$HOME/Music/Offline/"
pDIR="$HOME/Music/Playlists/"

# Directory for icons
iDIR="/usr/share/icons/BeautyLine/actions/scalable"

# Prefix to run commands in wayland using uwsm.
PREFIX=$("$HOME/.config/.scripts/wayland-prefix")

if [ "${UWSM_SESSION}" ]; then
  ROFI_CONFIG="$HOME/.config/rofi/config-wide.rasi"
else
  ROFI_CONFIG="$HOME/.config/rofi/launchers/type-1/style-6.rasi"
fi

# Online Stations. Edit as required
# https://streamurl.link is a good resource for online music
declare -A online_music=(
  ["Radio - Lofi Girl ðŸŽ§ðŸŽ¶"]="https://play.streamafrica.net/lofiradio"
  ["Radio - Chillhop ðŸŽ§ðŸŽ¶"]="http://stream.zeno.fm/fyn8eh3h5f8uv"
  ["Radio - Alternative Crossover ðŸŽ§ðŸŽ¶"]="http://streams.deltaradio.de/delta-alternative/mp3-192/play.m3u"
  ["Radio - Classical Oasis ðŸŽ§ðŸŽ¶"]="http://66.42.114.24:8000/live"
  ["Radio - Radio Art Broadway ðŸŽ§ðŸŽ¶"]="http://air-tunein.radioart.com/fBroadway.mp3"
  ["Radio - Irish Folk ðŸŽ§ðŸŽ¶"]="https://irish-folk.stream.laut.fm/irish-folk"
  ["Radio - Heart Musicals ðŸŽ§ðŸŽ¶"]="http://media-ice.musicradio.com/HeartMusicalsMP3"
  ["Radio - Study Music ðŸŽ§ðŸŽ¶"]="https://study-high.rautemusik.fm/"
  ["Radio - DooWop Music ðŸŽ§ðŸŽ¶"]="http://66.59.109.208:8000/stream/2/;"
  ["Radio - Mel's Old Time Radio Shows ðŸŽ§ðŸŽ¶"]="http://ec1.yesstreaming.net:1790"
  ["Radio - Greek New Age ðŸŽ§ðŸŽ¶"]="https://stream-152.zeno.fm/9yu82xwmdc9uv"
  ["Radio - Colorado Classical ðŸŽ§ðŸŽ¶"]="https://stream1.cprnetwork.org/cpr2_lo"
  ["Radio - Vocal Jazz 181 ðŸŽ§ðŸŽ¶"]="http://listen.181fm.com/181-vocals_128k.mp3"
  ["Radio - Swing Street ðŸŽ§ðŸŽ¶"]="https://s1.voscast.com:10413/stream"
  ["Radio - Cleansing 50s ðŸŽ§ðŸŽ¶"]="http://hemnos.cdnstream.com/1464_128"
)

# Populate local_music array with files from music directory and subdirectories
populate_local_music() {
  local_music=()
  filenames=()
  while IFS= read -r file; do
    local_music+=("$file")
    filenames+=("$(basename "$file")")
  done < <(find "$mDIR" -type f \( -iname "*.mp3" -o -iname "*.m4a" -o -iname "*.flac" -o -iname "*.wav" -o -iname "*.ogg" -o -iname "*.mp4" \))
}

# Function for displaying notifications
notification() {
  # notify-send -u normal -i "$iDIR/media-playback-playing.svg" "Playing: $@"
  # echo "$iDIR/media-playback-playing.svg" "Playing: $@"
  echo "$iDIR/media-playback-playing.svg" "Playing..."
}

# Main function for playing local music
play_local_music() {
  populate_local_music

  # Prompt the user to select a song
  choice=$(printf "%s\n" "${filenames[@]}" | rofi -i -dmenu -config "$ROFI_CONFIG" -p "Select Song:")

  if [ -z "$choice" ]; then
    exit 1
  fi

  # Find the corresponding file path based on user's choice and set that to play the song then continue on the list
  for ((i = 0; i < "${#filenames[@]}"; ++i)); do
    if [ "${filenames[$i]}" = "$choice" ]; then

      notification "$choice"

      # Play the selected local music file using mpv
      "${PREFIX}mpv" --playlist-start="$i" --loop-playlist --vid=no "${local_music[@]}"

      break
    fi
  done
}

# Main function for shuffling local music
shuffle_local_music() {
  notification "Shuffle local music"

  # Play music in $mDIR on shuffle
  eval "${PREFIX}mpv --shuffle --loop-playlist --vid=no $mDIR"
}

shuffle_playlist() {
  # Get the list of full directories into an array
  mapfile -t LISTS < <(find "$pDIR" -mindepth 1 -maxdepth 1 -type d | sort)

  # Get just the folder names (basename) into a second array
  NAMES=()
  for path in "${LISTS[@]}"; do
    NAMES+=("$(basename "$path")")
  done

  # Let the user pick a name
  pNAME=$(printf "%s\n" "${NAMES[@]}" | rofi -i -dmenu -config "$ROFI_CONFIG" -p "Playlists:")

  # Convert selected name back to full path
  for i in "${!NAMES[@]}"; do
    if [[ "${NAMES[$i]}" == "$pNAME" ]]; then
      pLIST="${LISTS[$i]}"
      break
    fi
  done

  notification "Shuffle Play a Playlist"

  # Run the player
  if [[ -n "$pLIST" && -d "$pLIST" ]]; then
    eval "${PREFIX}mpv --shuffle --loop-playlist --vid=no \"$pLIST\""
  else
    exit 1
  fi
}

play_artist() {
  # Get the list of full directories into an array
  mapfile -t ARTS < <(find "$mDIR" -mindepth 1 -maxdepth 1 -type d | sort)
  echo "in play_artist function"
  # Get just the folder names (basename) into a second array
  NAMES=()
  for path in "${ARTS[@]}"; do
    NAMES+=("$(basename "$path")")
  done

  # Let the user pick a name
  aNAME=$(printf "%s\n" "${NAMES[@]}" | rofi -i -dmenu -config "$ROFI_CONFIG" -p "Artists:")

  # Convert selected name back to full path
  for i in "${!NAMES[@]}"; do
    echo [Debug] "NAMES[$i]: ${NAMES[$i]} aNAME: $aNAME"
    if [[ "${NAMES[$i]}" == "$aNAME" ]]; then
      aLIST="${ARTS[$i]}"
      break
    fi
  done

  echo [Debug] "aLIST: $aLIST"
  notification "Play an Artist"

  # Run the player
  if [[ -n "$aLIST" && -d "$aLIST" ]]; then
    eval "${PREFIX}mpv --loop-playlist --vid=no \"$aLIST\""
  else
    echo [Debug] "No such directory: $aLIST"
    exit 1
  fi
}

# Main function for playing online music
play_online_music() {
  choice=$(printf "%s\n" "${!online_music[@]}" | rofi -i -dmenu -config "$ROFI_CONFIG" -p "Online Music:")

  if [ -z "$choice" ]; then
    exit 1
  fi

  link="${online_music[$choice]}"

  notification "$choice"

  # Play the selected online music using mpv
  eval "${PREFIX}mpv --shuffle --vid=no $link"
}

# ------MAIN------
if pkill mpv; then
  notify-send -u low -i "$iDIR/media-playback-stopped.svg" "Music stopped"
else
  # code to run if mpv was not already running
  # echo "mpv was not running"
  # Prompt the user to choose between local and online music
  user_choice=$(printf "Play from Online Stations\nChoose a Song From the Music Folder\nShuffle Play the Music Folder\nShuffle-play a Playlist\nPlay an Artist-Ablum" | rofi -dmenu -config "$ROFI_CONFIG" -p "Select source:")

  case "$user_choice" in
  "Play from Online Stations")
    play_online_music
    ;;
  "Choose a Song From the Music Folder")
    play_local_music
    ;;
  "Shuffle Play the Music Folder")
    shuffle_local_music
    ;;
  "Shuffle-play a Playlist")
    shuffle_playlist
    ;;
  "Play an Artist-Ablum")
    play_artist
    ;;
  *)
    echo "Invalid choice"
    ;;
  esac
fi
